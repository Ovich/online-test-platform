{
  "comment": "Used both in frontend and backend. language property of an environment must match the monaco editor language property : https://github.com/microsoft/monaco-editor/tree/main/src/basic-languages",
  "codeWritingIcon": "/svg/languages/code-editor.svg",
  "codeReadingIcon": "/svg/languages/check-list.svg",
  "environments": [
      {
        "language": "cpp",
        "extension": "cpp",
        "label": "C++",
        "icon": "/svg/languages/cpp.svg",
        "sandbox": {
          "image": "gcc:latest",
          "defaultPath": "/src/main.cpp",
          "exec": "/src/main",
          "beforeAll": "g++  -std=c++17 /src/main.cpp -o /src/main"
        },
        "codeWriting": {
          "testCases": [
            {
              "exec": "/src/main",
              "input": "Hello World1",
              "expectedOutput": "HELLO WORLD1\n"
            }
          ],
          "files": {
            "solution": [
              {
                "path": "/src/main.cpp",
                "content": "\n#include <iostream>\n#include <string>\nusing namespace std;\n\nstring toUpperCase(string str) {\n    for(int i = 0; i < str.length(); i++) {\n        if(str[i] >= 'a' && str[i] <= 'z') {\n            str[i] = str[i] - 32;\n        }\n    }\n    return str;\n}\n\n\nint main() {\n    string line;\n    while(getline(cin, line)) {\n        cout << toUpperCase(line) << endl;\n    }\n    return 0;\n}"
              }
            ],
            "template": [
              {
                "path": "/src/main.cpp",
                "content": "\n#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string line;\n    cout << \"Hello World!\" << endl;\n    return 0;\n}"
              }
            ]
          }
        },
        "codeReading": {
          "context": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cctype>\nusing namespace std;\n\n{{SNIPPET_FUNCTION_DECLARATIONS}}\n\nint main() {\n    string functionName;\n    cin >> functionName;\n    {{SNIPPET_FUNCTION_CALLS}}\n    return 0;\n}",
          "snippetWrapperFunctionSignature": "void {{SNIPPET_FUNCTION_NAME}}(){\n{{SNIPPET_FUNCTION_BODY}}\n}",
          "snippetFunctionCallTemplate": "if (functionName == \"{{SNIPPET_FUNCTION_NAME}}\") { {{SNIPPET_FUNCTION_NAME}}(); }",
          "snippets": [
              {
                  "snippet": "std::string s = \"hello, world\";\nstd::transform(s.begin(), s.end(), s.begin(), ::toupper);\nstd::cout << s;",
                  "output": "HELLO, WORLD"
              },
              {
                  "snippet": "for(int i = 0; i < 3; i++) {\n    cout << i << endl;\n}",
                  "output": "0\n1\n2\n"
              },
              {
                  "snippet": "int i = 11;\nwhile (i > 4) {\n  cout << (i -= 2) << \" \";\n}",
                  "output": "9 7 5 3 "
              },
              {
                  "snippet": "string str;\nfor(char c = 'A'; c <= 'C'; ++c) \n  str = str + c + str;\ncout << str;",
                  "output": "ABACABA"
              }
          ]
        }
      },
      {
        "language": "c",
        "extension": "c",
        "label": "C",
        "icon": "/svg/languages/c.svg",
        "sandbox": {
          "image": "gcc:latest",
          "defaultPath": "/src/main.c",
          "exec": "/src/main",
          "beforeAll": "gcc -std=c11 /src/main.c -o /src/main"
        },
        "codeWriting": {
          "testCases": [
            {
              "exec": "/src/main",
              "input": "Hello World1",
              "expectedOutput": "HELLO WORLD1\n"
            }
          ],
          "files": {
            "solution": [
              {
                "path": "/src/main.c",
                "content": "\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nvoid toUpperCase(char* str) {\n    for(int i = 0; str[i] != '\\0'; i++) {\n        str[i] = toupper(str[i]);\n    }\n}\n\nint main() {\n    char line[1000];\n    while(fgets(line, sizeof(line), stdin)) {\n        toUpperCase(line);\n        printf(\"%s\", line);\n    }\n    return 0;\n}"
              }
            ],
            "template": [
              {
                "path": "/src/main.c",
                "content": "\n#include <stdio.h>\n\nint main() {\n    printf(\"Hello World!\\n\");\n    return 0;\n}"
              }
            ]
          }
        },
        "codeReading": {
          "context": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\n{{SNIPPET_FUNCTION_DECLARATIONS}}\n\nint main() {\n    char functionName[100];\n    scanf(\"%s\", functionName);\n    {{SNIPPET_FUNCTION_CALLS}}\n    return 0;\n}",
          "snippetWrapperFunctionSignature": "void {{SNIPPET_FUNCTION_NAME}}(){\n{{SNIPPET_FUNCTION_BODY}}\n}",
          "snippetFunctionCallTemplate": "if (strcmp(functionName, \"{{SNIPPET_FUNCTION_NAME}}\") == 0) { {{SNIPPET_FUNCTION_NAME}}(); }",
          "snippets": [
            {
              "snippet": "char s[] = \"hello, world\";\nfor (int i = 0; s[i]; i++) s[i] = toupper(s[i]);\nprintf(\"%s\", s);",
              "output": "HELLO, WORLD"
            },
            {
              "snippet": "for (int i = 0; i < 3; i++) {\n    printf(\"%d\\n\", i);\n}",
              "output": "0\n1\n2\n"
            },
            {
              "snippet": "int i = 11;\nwhile (i > 4) {\n    i -= 2;\n    printf(\"%d \", i);\n}",
              "output": "9 7 5 3 "
            },
            {
              "snippet": "char str[20] = \"\";\nchar temp[20];\nfor (char c = 'A'; c <= 'C'; c++) {\n    sprintf(temp, \"%s%c%s\", str, c, str);\n    strcpy(str, temp);\n}\nprintf(\"%s\", str);",
              "output": "ABACABA"
            }
          ]
        }
      },
      {
        "language": "java",
        "extension": "java",
        "label": "Java",
        "icon": "/svg/languages/java.svg",
        "sandbox": {
          "image": "eclipse-temurin:latest",
          "defaultPath": "/src/Main.java",
          "exec": "java -cp /src Main",
          "beforeAll": "javac /src/Main.java"
        },
        "codeWriting": {
          "testCases": [
            {
              "exec": "java -cp /src Main",
              "input": "Hello World1",
              "expectedOutput": "HELLO WORLD1\n"
            }
          ],
          "files": {
            "solution": [
              {
                "path": "/src/Main.java",
                "content": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        while(sc.hasNextLine()) {\n            System.out.println(sc.nextLine().toUpperCase());\n        }\n    }\n}"
              }
            ],
            "template": [
              {
                "path": "/src/Main.java",
                "content": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        while(sc.hasNextLine()) {\n            System.out.println(sc.nextLine());\n        }\n    }\n}"
              }
            ]
          }
        },
        "codeReading": {
          "context": "import java.util.Scanner;\n\npublic class Main {\n  \n\n{{SNIPPET_FUNCTION_DECLARATIONS}}\n\n   public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String functionName = scanner.nextLine();\n        {{SNIPPET_FUNCTION_CALLS}}\n        scanner.close();\n    }\n}",
          "snippetWrapperFunctionSignature": "private static void {{SNIPPET_FUNCTION_NAME}}(){\n{{SNIPPET_FUNCTION_BODY}}\n}",
          "snippetFunctionCallTemplate": "if (functionName.equals(\"{{SNIPPET_FUNCTION_NAME}}\")) { {{SNIPPET_FUNCTION_NAME}}(); }\n",
          "snippets": [
            {
              "snippet": "String s = \"hello, world\";\ns = s.toUpperCase();\nSystem.out.println(s);",
              "output": "HELLO, WORLD"
            },
            {
              "snippet": "for (int i = 0; i < 3; i++) {\n    System.out.println(i);\n}",
              "output": "0\n1\n2\n"
            },
            {
              "snippet": "int i = 11;\nwhile (i > 4) {\n    i -= 2;\n    System.out.print(i + \" \");\n}",
              "output": "9 7 5 3 "
            },
            {
              "snippet": "String str = \"\";\nfor (char c = 'A'; c <= 'C'; c++) {\n    str = str + c + str;\n}\nSystem.out.println(str);",
              "output": "ABACABA"
            }
          ]
        }
      },
      {
        "language": "javascript",
        "extension": "js",
        "label": "JavaScript",
        "icon": "/svg/languages/javascript.svg",
        "sandbox": {
          "image": "node:latest",
          "defaultPath": "/src/script.js",
          "exec": "node /src/script.js",
          "beforeAll": ""
        },
        "codeWriting":{
          "testCases": [
            {
              "exec": "node /src/script.js",
              "input": "Hello World1",
              "expectedOutput": "HELLO WORLD1\n"
            }
          ],
          "files": {
            "solution": [
              {
                "path": "/src/script.js",
                "content": "\nconst readline = require('readline');\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nrl.on('line', (line) => {\n    console.log(line.toUpperCase());\n});"
              }
            ],
            "template": [
              {
                "path": "/src/script.js",
                "content": "const readline = require('readline');\nconst rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nrl.on('line', (line) => {\n    console.log(line);\n});"
              }
            ]
          }
        },
        "codeReading": {
          "context": "\n\n{{SNIPPET_FUNCTION_DECLARATIONS}}\n\nfunction main() {\n    const readline = require('readline');\n    const rl = readline.createInterface({\n        input: process.stdin,\n        output: process.stdout\n    });\n    rl.on('line', (functionName) => {\n        {{SNIPPET_FUNCTION_CALLS}}\n        rl.close();\n    });\n}\nmain();",
          "snippetWrapperFunctionSignature": "function {{SNIPPET_FUNCTION_NAME}}(){\n{{SNIPPET_FUNCTION_BODY}}\n}",
          "snippetFunctionCallTemplate": "if (functionName === '{{SNIPPET_FUNCTION_NAME}}') { {{SNIPPET_FUNCTION_NAME}}(); }\n",
          "snippets": [
            {
              "snippet": "let s = 'hello, world';\ns = s.toUpperCase();\nconsole.log(s);",
              "output": "HELLO, WORLD"
            },
            {
              "snippet": "for (let i = 0; i < 3; i++) {\n    console.log(i);\n}",
              "output": "0\n1\n2\n"
            },
            {
              "snippet": "let i = 11;\nwhile (i > 4) {\n    i -= 2;\n    console.log(i + ' ');\n}",
              "output": "9 7 5 3 "
            },
            {
              "snippet": "let str = '';\nfor (let c = 'A'; c <= 'C'; c = String.fromCharCode(c.charCodeAt(0) + 1)) {\n    str = str + c + str;\n}\nconsole.log(str);",
              "output": "ABACABA"
            }
          ]
        }
      },
      {
        "language": "python",
        "extension": "py",
        "label": "Python",
        "icon": "/svg/languages/python.svg",
        "sandbox": {
          "image": "python:latest",
          "defaultPath": "/src/script.py",
          "exec": "python /src/script.py",
          "beforeAll": ""
        },
        "codeWriting": {
          "testCases": [
            {
              "exec": "python /src/script.py",
              "input": "Hello World1",
              "expectedOutput": "HELLO WORLD1"
            }
          ],
          "files": {
            "solution": [
              {
                "path": "/src/script.py",
                "content": "import sys\nfor line in sys.stdin:\n    print(line.upper(), end=\"\")"
              }
            ],
            "template": [
              {
                "path": "/src/script.py",
                "content": "import sys\nfor line in sys.stdin:\n    print(line, end=\"\")"
              }
            ]
          }
        },
        "codeReading": {
          "context": "import sys\n\n{{SNIPPET_FUNCTION_DECLARATIONS}}\n\ndef main():\n   functionName = sys.stdin.read().strip()\n   {{SNIPPET_FUNCTION_CALLS}}\n\nif __name__ == '__main__':\n   main()",
          "snippetWrapperFunctionSignature": "def {{SNIPPET_FUNCTION_NAME}}():\n{{SNIPPET_FUNCTION_BODY}}",
          "snippetFunctionCallTemplate": "if functionName == '{{SNIPPET_FUNCTION_NAME}}':\n   {{SNIPPET_FUNCTION_NAME}}()\n",
          "snippets": [
            {
              "snippet": "s = 'hello, world'\ns = s.upper()\nprint(s)",
              "output": "HELLO, WORLD"
            },
            {
              "snippet": "for i in range(3):\n    print(i)",
              "output": "0\n1\n2\n"
            },
            {
              "snippet": "i = 11\nwhile i > 4:\n    i -= 2\n    print(i, end=' ')",
              "output": "9 7 5 3 "
            },
            {
              "snippet": "str = ''\nfor c in ['A', 'B', 'C']:\n    str = str + c + str\nprint(str)",
              "output": "ABACABA"
            }
          ]
        }
      },
      {
        "language": "go",
        "extension": "go",
        "label": "Go",
        "icon": "/svg/languages/go.svg",
        "sandbox": {
          "image": "golang:latest",
          "defaultPath": "/go/src/main.go",
          "exec": "/go/src/main",
          "beforeAll": "cd /go/src && go build -o main main.go"
        },
        "codeWriting": {
          "testCases": [
            {
              "exec": "/go/src/main",
              "input": "Hello World1",
              "expectedOutput": "HELLO WORLD1\n"
            }
          ],
          "files": {
            "solution": [
              {
                "path": "/go/src/main.go",
                "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tfor scanner.Scan() {\n\t\tinput := scanner.Text()\n\t\toutput := strings.ToUpper(input)\n\t\tprintln(output)\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\tprintln(\"error reading input:\", err)\n\t}\n}"
              }
            ],
            "template": [
              {
                "path": "/go/src/main.go",
                "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tfor scanner.Scan() {\n\t\tprintln(scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\tprintln(\"error reading input:\", err)\n\t}\n}"
              }
            ]
          }
        },
        "codeReading": {
          "context": "package main\n\nimport (\n\t\"fmt\"\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n{{SNIPPET_FUNCTION_DECLARATIONS}}\n\nfunc main() {\n   reader := bufio.NewReader(os.Stdin)\n   functionName, _ := reader.ReadString('\\n')\n   functionName = strings.TrimSpace(functionName)\n   {{SNIPPET_FUNCTION_CALLS}}\n}",
          "snippetWrapperFunctionSignature": "func {{SNIPPET_FUNCTION_NAME}}() {\n{{SNIPPET_FUNCTION_BODY}}\n}",
          "snippetFunctionCallTemplate": "if functionName == \"{{SNIPPET_FUNCTION_NAME}}\" {\n\t{{SNIPPET_FUNCTION_NAME}}()\n}",
          "snippets": [
            {
              "snippet": "s := \"hello, world\"\nfmt.Println(strings.ToUpper(s))",
              "output": "HELLO, WORLD"
            },
            {
              "snippet": "for i := 0; i < 3; i++ {\n\tfmt.Println(i)\n}",
              "output": "0\n1\n2"
            },
            {
              "snippet": "i := 11\nfor i > 4 {\n\ti -= 2\n\tfmt.Printf(\"%d \", i)\n}",
              "output": "9 7 5 3 "
            },
            {
              "snippet": "str := \"\"\nfor _, c := range \"ABC\" {\n\tstr = fmt.Sprintf(\"%s%c%s\", str, c, str)\n}\nfmt.Println(str)",
              "output": "ABACABA"
            }
          ]
        }
      }
  ],
  "monacoExtensionToLanguage": {
    "abap": "abap",
    "cls": "apex",
    "azcli": "azcli",
    "bat": "bat",
    "bicep": "bicep",
    "ml4": "cameligo",
    "clj": "clojure",
    "cljs": "clojure",
    "cljc": "clojure",
    "edn": "clojure",
    "coffee": "coffee",
    "cpp": "cpp",
    "cc": "cpp",
    "cxx": "cpp",
    "hpp": "cpp",
    "hh": "cpp",
    "hxx": "cpp",
    "h": "cpp",
    "c": "cpp",
    "cs": "csharp",
    "csp": "csp",
    "css": "css",
    "cyp": "cypher",
    "dart": "dart",
    "dockerfile": "dockerfile",
    "ecl": "ecl",
    "eclxml": "ecl",
    "ex": "elixir",
    "exs": "elixir",
    "flo": "flow9",
    "ftl": "freemarker2",
    "fs": "fsharp",
    "fsi": "fsharp",
    "fsx": "fsharp",
    "fsscript": "fsharp",
    "go": "go",
    "graphql": "graphql",
    "gql": "graphql",
    "hbs": "handlebars",
    "hcl": "hcl",
    "html": "html",
    "htm": "html",
    "ini": "ini",
    "java": "java",
    "js": "javascript",
    "mjs": "javascript",
    "jsx": "javascript",
    "jl": "julia",
    "json": "json",
    "kt": "kotlin",
    "kts": "kotlin",
    "less": "less",
    "lx": "lexon",
    "liquid": "liquid",
    "lua": "lua",
    "m3": "m3",
    "md": "markdown",
    "markdown": "markdown",
    "s": "mips",
    "msdax": "msdax",
    "dax": "msdax",
    "mysql": "mysql",
    "m": "objective-c",
    "mm": "objective-c",
    "pas": "pascal",
    "pascaligo": "pascaligo",
    "pl": "perl",
    "pgsql": "pgsql",
    "php": "php",
    "pla": "pla",
    "dats": "postiats",
    "pq": "powerquery",
    "ps1": "powershell",
    "psm1": "powershell",
    "psd1": "powershell",
    "proto": "protobuf",
    "pug": "pug",
    "py": "python",
    "pyi": "python",
    "qs": "qsharp",
    "r": "r",
    "R": "r",
    "cshtml": "razor",
    "vbhtml": "razor",
    "redis": "redis",
    "redshift": "redshift",
    "rst": "restructuredtext",
    "rb": "ruby",
    "rs": "rust",
    "sb": "sb",
    "scala": "scala",
    "scm": "scheme",
    "ss": "scheme",
    "scss": "scss",
    "sh": "shell",
    "bash": "shell",
    "zsh": "shell",
    "sol": "solidity",
    "sofia": "sophia",
    "rq": "sparql",
    "sql": "sql",
    "st": "st",
    "swift": "swift",
    "sv": "systemverilog",
    "tcl": "tcl",
    "test": "test",
    "twig": "twig",
    "ts": "typescript",
    "tsx": "typescript",
    "vb": "vb",
    "xml": "xml",
    "xsd": "xml",
    "xsl": "xml",
    "yaml": "yaml",
    "yml": "yaml"
  }
}
