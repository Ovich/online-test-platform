// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(STUDENT)

  userOnExamSession       UserOnExamSession[]
  studentAnswerGraduation StudentAnswerGraduation[]
  studentAnswer           StudentAnswer[]
}

enum Role {
  STUDENT
  PROFESSOR
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum QuestionType {
  multipleChoice
  trueFalse
  essay
  code
}

model Exam {
  id          String  @id @default(cuid())
  label       String  @unique
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questions Question[]
}

model Question {
  id        String       @id @default(cuid())
  type      QuestionType
  content   String
  points    Int          @default(4)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  position Int @default(0)

  exam   Exam?   @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId String?

  multipleChoice MultipleChoice?
  trueFalse      TrueFalse?
  essay          Essay?
  code           Code?

  examSession   ExamSession? @relation(fields: [examSessionId], references: [id], onDelete: Cascade)
  examSessionId String?

  studentAnswer StudentAnswer?
}

model MultipleChoice {
  ids        String   @id @default(cuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @unique
  options    Option[]
}

model Option {
  id               String                        @id @default(cuid())
  multipleChoice   MultipleChoice                @relation(fields: [multipleChoiceId], references: [ids], onDelete: Cascade)
  multipleChoiceId String
  text             String?
  isCorrect        Boolean                       @default(false)
  answers          StudentAnswerMultipleChoice[]
}

model TrueFalse {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @id
  isTrue     Boolean  @default(true)
}

model Essay {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @id
}

model Code {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @id
  solution   String?
  code       String?
}

enum ExamSessionPhase {
  DRAFT
  IN_PROGRESS
  GRADING
  FINISHED
}

model ExamSession {
  id String @id @default(cuid())

  label      String?
  conditions String?
  phase      ExamSessionPhase @default(DRAFT)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  durationHours Int? @default(0)
  durationMins  Int? @default(0)

  startAt DateTime?
  endAt   DateTime?

  students  UserOnExamSession[]
  questions Question[]
}

model UserOnExamSession {
  user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String

  examSession   ExamSession @relation(fields: [examSessionId], references: [id], onDelete: Cascade)
  examSessionId String

  registeredAt DateTime @default(now())

  score Int @default(0)

  @@id([userEmail, examSessionId])
}

model StudentAnswer {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @unique

  user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String

  multipleChoice StudentAnswerMultipleChoice?
  trueFalse      StudentAnswerTrueFalse?
  essay          StudentAnswerEssay?
  code           StudentAnswerCode?

  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  studentAnswerGraduation StudentAnswerGraduation?

  @@id([userEmail, questionId])
}

model StudentAnswerGraduation {
  studentAnswer StudentAnswer @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail     String
  questionId    String

  createdAt DateTime @default(now())

  pointsObtained Int     @default(0)
  isCorrect      Boolean @default(false)

  signedBy            User?   @relation(fields: [signedByUserEmail], references: [email])
  signedByUserEmail   String?
  signedByUserRemarks String?

  @@id([userEmail, questionId])
}

model StudentAnswerTrueFalse {
  id            String        @id @default(cuid())
  studentAnswer StudentAnswer @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail     String
  questionId    String

  isTrue Boolean @default(true)

  @@unique([userEmail, questionId])
}

model StudentAnswerEssay {
  id String @id @default(cuid())

  studentAnswer StudentAnswer @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail     String
  questionId    String

  content String?

  @@unique([userEmail, questionId])
}

model StudentAnswerMultipleChoice {
  id String @id @default(cuid())

  studentAnswer StudentAnswer @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail     String
  questionId    String

  options Option[]

  @@unique([userEmail, questionId])
}

model StudentAnswerCode {
  id String @id @default(cuid())

  studentAnswer StudentAnswer @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail     String
  questionId    String

  code     String?

  expectedOutput String?
  resultOutput   String?

  success   Boolean @default(false)

  @@unique([userEmail, questionId])
}
