// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StudentPermission {
  UPDATE
  VIEW
  HIDDEN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  refresh_expires_in Int?
  not_before_policy Int? 
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  roles         Role[]      

  userOnEvaluation UserOnEvaluation[]
  studentAnswer    StudentAnswer[]
  gradingSignedBy  StudentQuestionGrading[]
  groups           UserOnGroup[]
  groupsCreated    Group[]
}

enum Role {
  STUDENT
  PROFESSOR
  SUPER_ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum QuestionType {
  multipleChoice
  trueFalse
  essay
  code
  web
  database
}

model Group {
  id    String @id @default(cuid())
  label String @unique

  scope String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User?   @relation(fields: [createdById], references: [id])
  createdById String?

  members UserOnGroup[]

  questions   Question[]
  collections Collection[]
  tags        Tag[]
  evaluations  Evaluation[]
}

model UserOnGroup {
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  group    Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId  String
  selected Boolean @default(false)

  @@id([userId, groupId])
}

model Collection {
  id    String @id @default(cuid())
  label String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  collectionToQuestions CollectionToQuestion[]

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  @@unique([groupId, label])
}

model CollectionToQuestion {
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId   String

  order  Int   @default(0)
  points Float @default(4)

  @@id([collectionId, questionId])
}

enum QuestionSource {
  BANK
  EVAL
}

model Question {
  id      String       @id @default(cuid())
  type    QuestionType
  source  QuestionSource @default(BANK)

  title   String
  content String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  multipleChoice MultipleChoice?
  trueFalse      TrueFalse?
  essay          Essay?
  code           Code?
  web            Web?
  database       Database?

  collection CollectionToQuestion[]

  sourceQuestionId String?           // Field indicating the ID of the source question if this is a copy
  sourceQuestion   Question?         @relation("SourceQuestion", fields: [sourceQuestionId], references: [id])
  copiedQuestions  Question[]        @relation("SourceQuestion")

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  studentAnswer StudentAnswer[]
  questionToTag QuestionToTag[]
  evaluation    EvaluationToQuestion?
}

model MultipleChoice {
  id         String   @id @default(cuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @unique
  options    Option[]
}

model Option {
  id               String         @id @default(cuid())
  order            Int            @default(0)
  multipleChoice   MultipleChoice @relation(fields: [multipleChoiceId], references: [id], onDelete: Cascade)
  multipleChoiceId String
  text             String?
  isCorrect        Boolean        @default(false)

  studentAnswerMultipleChoice StudentAnswerMultipleChoice[]
}

model TrueFalse {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @id
  isTrue     Boolean?
}

model Essay {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @id

  solution String?
}

model SandBox {
  image     String
  beforeAll String?

  Code       Code   @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  questionId String @id @unique
}

model TestCase {
  index      Int
  code       Code   @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  questionId String

  exec           String
  input          String
  expectedOutput String

  @@id([index, questionId])
}

model Code {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @id

  language String?

  sandbox SandBox?

  testCases TestCase[]

  solutionFiles CodeToSolutionFile[]
  templateFiles CodeToTemplateFile[]
  files         File[] // to casdade delete files
}

model Database {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @id

  image           String?                   @default("")
  solutionQueries DatabaseToSolutionQuery[]
  databaseQueries DatabaseQuery[]
}

model DatabaseToSolutionQuery {
  database   Database @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  questionId String

  query   DatabaseQuery @relation(fields: [queryId], references: [id], onDelete: Cascade)
  queryId String        @unique

  outputId String?              @unique
  output   DatabaseQueryOutput? @relation(fields: [outputId], references: [id])

  @@id([questionId, queryId])
}

enum DatabaseQueryOutputType {
  TABULAR
  SCALAR
  TEXT
}

enum DatabaseQueryOutputStatus {
  SUCCESS
  ERROR
  WARNING
  RUNNING
  NEUTRAL
}

enum DatabaseDBMS {
  POSTGRES
  MYSQL
  MARIADB
  MSSQL
  SQLITE
}

model DatabaseQuery {
  id String @id @default(cuid())

  order Int @default(0)

  database   Database? @relation(fields: [questionId], references: [questionId], onDelete: Cascade) // to casdade delete queries
  questionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String?
  description String?

  lintActive Boolean @default(false)
  lintRules  String?
  lintResult Json?

  content  String?
  template String? // not used for users answer

  studentPermission StudentPermission @default(UPDATE)

  testQuery        Boolean                     @default(false)
  queryOutputTests DatabaseQueryToOutputTest[]

  studentAnswerDatabaseToQuery StudentAnswerDatabaseToQuery?
  databaseToSolutionQuery      DatabaseToSolutionQuery?

  // Used for cascade delete,
  // we can have 2 outputs for the same query, users answer and solution when in context of the users answer
  databaseQueryOutput DatabaseQueryOutput[]
}

model File {
  id String @id @default(cuid())

  code       Code   @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  questionId String

  path    String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  codeToSolutionFile CodeToSolutionFile?
  codeToTemplateFile CodeToTemplateFile?
  studentAnswerCode  StudentAnswerCodeToFile?
}

model StudentAnswerDatabaseToQuery {
  studentAnswerDatabase StudentAnswerDatabase @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail             String
  questionId            String

  query   DatabaseQuery @relation(fields: [queryId], references: [id], onDelete: Cascade)
  queryId String        @unique

  studentOutputId  String? @unique
  solutionOutputId String? @unique

  studentOutput DatabaseQueryOutput? @relation("StudentOutputRelation", fields: [studentOutputId], references: [id])

  @@id([userEmail, questionId, queryId])
}

model StudentAnswerCodeToFile {
  studentAnswerCode StudentAnswerCode @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail         String
  questionId        String

  order Int @default(0)

  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId String @unique

  studentPermission StudentPermission @default(UPDATE)

  @@id([userEmail, questionId, fileId])
}

model DatabaseQueryOutput {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  output Json

  status DatabaseQueryOutputStatus @default(RUNNING)
  type   DatabaseQueryOutputType   @default(TEXT)
  dbms   DatabaseDBMS              @default(POSTGRES)

  // relatio used for cascade delete
  query   DatabaseQuery @relation(fields: [queryId], references: [id], onDelete: Cascade)
  queryId String

  studentAnswer StudentAnswerDatabaseToQuery? @relation("StudentOutputRelation")
  querySolution DatabaseToSolutionQuery? // Reverse relation for DatabaseToSolutionQuery
}

model DatabaseQueryToOutputTest {
  query DatabaseQuery @relation(fields: [queryId], references: [id], onDelete: Cascade)

  queryId String
  test    DatabaseQueryOutputTest

  @@id([queryId, test])
}

enum DatabaseQueryOutputTest {
  IGNORE_COLUMN_ORDER
  IGNORE_ROW_ORDER
  IGNORE_EXTRA_COLUMNS
  INGORE_COLUMN_TYPES
}

model CodeToSolutionFile {
  code       Code   @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  questionId String

  order Int @default(0)

  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId String @unique

  @@id([questionId, fileId])
}

model CodeToTemplateFile {
  code       Code   @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  questionId String

  order Int @default(0)

  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId String @unique

  studentPermission StudentPermission @default(UPDATE)

  @@id([questionId, fileId])
}

model Web {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @id

  solutionHtml String?
  solutionCss  String?
  solutionJs   String?

  templateHtml String?
  templateCss  String?
  templateJs   String?
}

model Tag {
  label String @id @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questionToTag QuestionToTag[]

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
}

model QuestionToTag {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  tag        Tag      @relation(fields: [label], references: [label], onDelete: Cascade)
  label      String

  @@id([questionId, label])
}

// Order is important here
enum EvaluationPhase {
  NEW
  DRAFT
  IN_PROGRESS
  GRADING
  FINISHED
}

enum EvaluationStatus {
  ACTIVE
  ARCHIVED
}

model Evaluation {
  id String @id @default(cuid())

  label      String?
  conditions String?
  status     EvaluationStatus @default(ACTIVE)
  phase      EvaluationPhase  @default(DRAFT)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  durationHours Int? @default(0)
  durationMins  Int? @default(0)

  startAt DateTime?
  endAt   DateTime?

  students              UserOnEvaluation[]
  evaluationToQuestions EvaluationToQuestion[]

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  @@unique([groupId, label])
	@@map("Evaluation")
}

model EvaluationToQuestion {
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  evaluationId String

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @unique

  points Float @default(0)
  order  Int   @default(0)

  @@id([evaluationId, questionId])
	@@map("EvaluationToQuestion")
}

enum UserOnEvaluationStatus {
  IN_PROGRESS
  FINISHED
}

model UserOnEvaluation {
  user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String

  evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  evaluationId String

  registeredAt DateTime @default(now())
  finishedAt DateTime?

  status UserOnEvaluationStatus @default(IN_PROGRESS)

  @@id([userEmail, evaluationId])
	@@map("UserOnEvaluation")
}

enum StudentAnswerStatus {
  MISSING
  IN_PROGRESS
  SUBMITTED
}

model StudentAnswer {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String

  status StudentAnswerStatus @default(MISSING)

  multipleChoice StudentAnswerMultipleChoice?
  trueFalse      StudentAnswerTrueFalse?
  essay          StudentAnswerEssay?
  code           StudentAnswerCode?
  web            StudentAnswerWeb?
  database       StudentAnswerDatabase?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentGrading StudentQuestionGrading?

  @@id([userEmail, questionId])
}

enum StudentQuestionGradingStatus {
  UNGRADED
  GRADED
  AUTOGRADED
}

model StudentQuestionGrading {
  studentAnswer StudentAnswer @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail     String
  questionId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  status         StudentQuestionGradingStatus @default(UNGRADED)
  pointsObtained Float                        @default(0)

  signedBy          User?   @relation(fields: [signedByUserEmail], references: [email])
  signedByUserEmail String?

  comment String?

  @@id([userEmail, questionId])
}

model StudentAnswerMultipleChoice {
  id            String        @id @default(cuid())
  studentAnswer StudentAnswer @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail     String
  questionId    String

  options Option[]

  @@unique([userEmail, questionId])
}

model StudentAnswerTrueFalse {
  studentAnswer StudentAnswer @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail     String
  questionId    String

  isTrue Boolean?

  @@id([userEmail, questionId])
}

model StudentAnswerEssay {
  studentAnswer StudentAnswer @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail     String
  questionId    String

  content String?

  @@id([userEmail, questionId])
}

model StudentAnswerCode {
  studentAnswer StudentAnswer @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail     String
  questionId    String

  files StudentAnswerCodeToFile[]

  // studentAnswerCodeHistory StudentAnswerCodeHistory[]

  testCaseResults TestCaseResult[]

  allTestCasesPassed Boolean @default(false)

  @@id([userEmail, questionId])
}

model StudentAnswerDatabase {
  studentAnswer StudentAnswer @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail     String
  questionId    String

  queries StudentAnswerDatabaseToQuery[]

  @@id([userEmail, questionId])
}

model TestCaseResult {
  userEmail  String
  questionId String
  index      Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  studentAnswerCode StudentAnswerCode @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)

  exec           String
  input          String
  output         String
  expectedOutput String

  passed Boolean

  @@id([index, userEmail, questionId])
}

model StudentAnswerWeb {
  studentAnswer StudentAnswer @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail     String
  questionId    String

  html String?
  css  String?
  js   String?

  @@id([userEmail, questionId])
}

model StudentAnswerCodeHistory {
  // studentAnswerCode StudentAnswerCode @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail  String
  questionId String

  createdAt DateTime @default(now())

  code String?

  @@id([userEmail, questionId, createdAt])
}
