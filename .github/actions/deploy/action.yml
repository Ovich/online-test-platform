name: 'Deployment Procedure'
description: 'Common deployment steps'
inputs:
  POSTGRES_USER:
    description: 'PostgreSQL user'
    required: true
  POSTGRES_PASSWORD:
    description: 'PostgreSQL password'
    required: true
  POSTGRES_DB:
    description: 'PostgreSQL database'
    required: true
  NEXTAUTH_URL:
    description: 'NextAuth URL'
    required: true
  NEXTAUTH_SECRET:
    description: 'NextAuth Secret'
    required: true
  NEXTAUTH_KEYCLOAK_ID:
    description: 'NextAuth Keycloak ID'
    required: true
  NEXTAUTH_KEYCLOAK_SECRET:
    description: 'NextAuth Keycloak Secret'
    required: true
  HEXTAUTH_KEYCLOAK_ISSUER_BASE_URL:
    description: 'NextAuth Keycloak Issuer Base URL'
    required: true
  SSL_FULLCHAIN:
    description: 'SSL Fullchain'
    required: true
  SSL_PRIVKEY:
    description: 'SSL Privkey'
    required: true
runs:
  using: 'composite'
  steps:
    
    - name: Move checked-out code to production folder
      run: |
        rsync -av --progress $GITHUB_WORKSPACE/ /home/heiguser/onlinetest/ --exclude .git
      shell: bash

    - name: Generate environment files
      run: |
        cd /home/heiguser/onlinetest
        echo "DATABASE_URL=postgresql://${{ inputs.POSTGRES_USER }}:${{ inputs.POSTGRES_PASSWORD }}@db:5432/${{ inputs.POSTGRES_DB }}" > web/.env
        echo "POSTGRES_USER=${{ inputs.POSTGRES_USER }}" >> web/.env
        echo "POSTGRES_PASSWORD=${{ inputs.POSTGRES_PASSWORD }}" >> web/.env
        echo "POSTGRES_DB=${{ inputs.POSTGRES_DB }}" >> web/.env
        echo "NEXTAUTH_URL=${{inputs.NEXTAUTH_URL}}" > web/.env.production
        echo "NEXTAUTH_SECRET=${{ inputs.NEXTAUTH_SECRET }}" >> web/.env.production
        echo "NEXTAUTH_KEYCLOAK_ID=${{ inputs.NEXTAUTH_KEYCLOAK_ID }}" >> web/.env.production
        echo "NEXTAUTH_KEYCLOAK_SECRET=${{ inputs.NEXTAUTH_KEYCLOAK_SECRET }}" >> web/.env.production
        echo "DB_SANDBOX_CLIENT_HOST=172.17.0.1" >> web/.env.production
      shell: bash

    - name: Ssl certificates for https
      run: |
        cd /home/heiguser/onlinetest
        mkdir -p ssl
        echo "${{ inputs.SSL_FULLCHAIN }}" > ssl/fullchain.pem
        echo "${{ inputs.SSL_PRIVKEY }}" > ssl/privkey.pem
      shell: bash
        
    - name: Build Custom Docker images
      run: |
        cd /home/heiguser/onlinetest
        docker build -t custom-sqlfluff ./docker-images/custom-sqlfluff
      shell: bash

    - name: Build Docker Compose Images
      run: |
        cd /home/heiguser/onlinetest
        docker compose build
      shell: bash

    - name: Start Docker Compose Services
      run: |
        cd /home/heiguser/onlinetest
        docker compose up -d
      shell: bash

    - name: Create Database Dump
      run: |
        mkdir -p /home/heiguser/db_dumps
        cd /home/heiguser/db_dumps
        backup_date=$(date +"%Y-%m-%d_%H-%M-%S")
        backup_filename="pg_workflow_backup_$backup_date.sql"
        
        # Connect to the 'db' service container and run pg_dump to create a dump
        container_db_id=$(docker ps -qf "name=onlinetest-db-")
        docker exec $container_db_id pg_dump -U ${{ inputs.POSTGRES_USER }} -d ${{ inputs.POSTGRES_DB }} -F c > $backup_filename
      shell: bash

    - name: Run Prisma Migrations
      run: |
        container_id=$(docker ps -qf "name=onlinetest-web-")
        docker exec $container_id npx prisma migrate deploy
      shell: bash

